services:
  # ===== DATABASES =====
  postgres:
    image: postgres:15-alpine
    container_name: schedule_postgres
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - schedule_platform_network

  redis:
    image: redis:7-alpine
    container_name: schedule_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - schedule_platform_network

  # ===== MICROSERVICES =====
  auth-service:
    build:
      context: ./services/auth_service
      dockerfile: Dockerfile
    container_name: auth_service
    environment:
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: auth_service_db
      DATABASE_USER: auth_user
      DATABASE_PASSWORD: auth_password
      DATABASE_URL: ${AUTH_DATABASE_URL}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/0
      
      # App settings
      APP_NAME: Auth Service
      APP_VERSION: 1.0.0
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${JWT_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      JWT_REFRESH_TOKEN_EXPIRE_DAYS: ${JWT_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-["http://localhost:3000","http://localhost:8080"]}
      ALLOW_CREDENTIALS: true
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - schedule_platform_network

  profile-service:
    build:
      context: ./services/profile_service
      dockerfile: Dockerfile
    container_name: profile_service
    environment:
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: profile_service_db
      DATABASE_USER: profile_user
      DATABASE_PASSWORD: profile_password
      DATABASE_URL: ${PROFILE_DATABASE_URL}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/1
      
      # App settings
      APP_NAME: Profile Service
      APP_VERSION: 1.0.0
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Microservices integration
      AUTH_SERVICE_URL: http://auth-service:8000
      SCHEDULE_SERVICE_URL: http://schedule-service:8001
      AUTH_SERVICE_TIMEOUT: 30
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      
      # Profile specific
      MAX_AVATAR_SIZE_MB: ${MAX_AVATAR_SIZE_MB:-5}
      ALLOWED_IMAGE_TYPES: ${ALLOWED_IMAGE_TYPES:-["image/jpeg","image/png","image/webp"]}
      AVATAR_UPLOAD_PATH: /app/static/avatars
      
      # Cache TTL
      CACHE_USER_PROFILE_TTL: ${CACHE_USER_PROFILE_TTL:-600}
      CACHE_DASHBOARD_TTL: ${CACHE_DASHBOARD_TTL:-300}
      CACHE_COMMENTS_TTL: ${CACHE_COMMENTS_TTL:-180}
      CACHE_ACTIVITY_TTL: ${CACHE_ACTIVITY_TTL:-3600}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-["http://localhost:3000","http://localhost:8080"]}
      ALLOW_CREDENTIALS: true
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    volumes:
      - avatar_uploads:/app/static/avatars
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - schedule_platform_network

  schedule-service:
    build:
      context: ./services/schedule_service
      dockerfile: Dockerfile
    container_name: schedule_service
    environment:
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: schedule_service_db
      DATABASE_USER: schedule_user
      DATABASE_PASSWORD: schedule_password
      DATABASE_URL: ${SCHEDULE_DATABASE_URL}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_URL: redis://redis:6379/2
      
      # App settings
      APP_NAME: Schedule Service
      APP_VERSION: 1.0.0
      DEBUG: ${DEBUG:-true}
      ENVIRONMENT: ${ENVIRONMENT:-development}
      
      # Microservices integration
      AUTH_SERVICE_URL: http://auth-service:8000
      PROFILE_SERVICE_URL: http://profile-service:8002
      AUTH_SERVICE_TIMEOUT: 30
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      INTERNAL_API_KEY: ${INTERNAL_API_KEY}
      
      # Schedule specific
      DEFAULT_LESSON_DURATION_MINUTES: ${DEFAULT_LESSON_DURATION_MINUTES:-60}
      MAX_ADVANCE_BOOKING_DAYS: ${MAX_ADVANCE_BOOKING_DAYS:-30}
      MIN_ADVANCE_BOOKING_HOURS: ${MIN_ADVANCE_BOOKING_HOURS:-2}
      BOOKING_WINDOW_WEEKS: ${BOOKING_WINDOW_WEEKS:-4}
      
      # CORS
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-["http://localhost:3000","http://localhost:8080"]}
      ALLOW_CREDENTIALS: true
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - schedule_platform_network

  # ===== MANAGEMENT TOOLS =====
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: schedule_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - schedule_platform_network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: schedule_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD:-admin}
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - schedule_platform_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  avatar_uploads:
    driver: local
  pgadmin_data:
    driver: local

networks:
  schedule_platform_network:
    driver: bridge