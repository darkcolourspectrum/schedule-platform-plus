"""
–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
–ó–∞–ø—É—Å–∫: python test_async_db.py
"""

import asyncio
import sys
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text
import logging
from app.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Windows - –∏—Å–ø–æ–ª—å–∑—É–µ–º SelectorEventLoop
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

async def test_async_connection():
    """–¢–µ—Å—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL —Å psycopg3"""
    try:
        # –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
        async_engine = create_async_engine(
            settings.database_url_async,
            echo=True,  # –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã
            pool_pre_ping=True,
            # –£–±–∏—Ä–∞–µ–º server_settings –¥–ª—è psycopg3
            connect_args={}
        )
        
        logger.info(f"üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º URL: {settings.database_url_async}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with async_engine.begin() as conn:
            result = await conn.execute(text("SELECT 1 as test"))
            test_result = result.scalar()
            
            if test_result == 1:
                logger.info("‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                version_result = await conn.execute(text("SELECT version()"))
                version = version_result.scalar()
                logger.info(f"üìä –í–µ—Ä—Å–∏—è PostgreSQL: {version}")
                
                # –¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
                db_result = await conn.execute(text("SELECT current_database()"))
                current_db = db_result.scalar()
                logger.info(f"üè∑Ô∏è  –¢–µ–∫—É—â–∞—è –±–∞–∑–∞: {current_db}")
                
                # –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                user_result = await conn.execute(text("SELECT current_user"))
                current_user = user_result.scalar()
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {current_user}")
                
                # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–≤–∏–∂–æ–∫
                await async_engine.dispose()
                
                return True
            else:
                logger.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")
                await async_engine.dispose()
                return False
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        logger.error(f"üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

if __name__ == "__main__":
    print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL...")
    print(f"üîó URL: {settings.database_url_async}")
    print(f"üè∑Ô∏è  –ë–∞–∑–∞: {settings.database_name}")
    print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {settings.database_user}")
    print("-" * 50)
    
    result = asyncio.run(test_async_connection())
    
    if result:
        print("\n‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print("üéâ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π!")
    else:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("   1. –£–±–µ–¥–∏—Å—å —á—Ç–æ psycopg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: pip install psycopg")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å —á—Ç–æ –≤–µ—Ä—Å–∏—è psycopg >= 3.0")
        print("   3. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: pip uninstall psycopg && pip install psycopg")