import redis.asyncio as redis
from redis.asyncio import Redis
import logging
from typing import Optional, Union
import json
from app.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)


class RedisClient:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–µ—Å—Å–∏–π
    """
    
    def __init__(self):
        self._redis: Optional[Redis] = None
    
    async def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            self._redis = redis.from_url(
                settings.redis_url,
                encoding="utf-8",
                decode_responses=True,
                socket_connect_timeout=5,
                socket_timeout=5,
                retry_on_timeout=True,
                health_check_interval=30,
            )
            
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await self._redis.ping()
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            raise
    
    async def disconnect(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self._redis:
            await self._redis.close()
            logger.info("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def get(self, key: str) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –∫–ª—é—á—É"""
        try:
            if not self._redis:
                await self.connect()
            return await self._redis.get(key)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ Redis key={key}: {e}")
            return None
    
    async def set(
        self,
        key: str,
        value: Union[str, dict, list],
        expire: Optional[int] = None
    ) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º TTL
        
        Args:
            key: –ö–ª—é—á
            value: –ó–Ω–∞—á–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫–∞, dict –∏–ª–∏ list)
            expire: TTL –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        try:
            if not self._redis:
                await self.connect()
            
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–ª–æ–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ JSON
            if isinstance(value, (dict, list)):
                value = json.dumps(value, ensure_ascii=False)
            
            if expire:
                return await self._redis.setex(key, expire, value)
            else:
                return await self._redis.set(key, value)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Redis key={key}: {e}")
            return False
    
    async def get_json(self, key: str) -> Optional[Union[dict, list]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è JSON –∑–Ω–∞—á–µ–Ω–∏—è"""
        try:
            value = await self.get(key)
            if value:
                return json.loads(value)
            return None
        except (json.JSONDecodeError, Exception) as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON key={key}: {e}")
            return None
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞"""
        try:
            if not self._redis:
                await self.connect()
            return bool(await self._redis.delete(key))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Redis key={key}: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞"""
        try:
            if not self._redis:
                await self.connect()
            return bool(await self._redis.exists(key))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è key={key}: {e}")
            return False
    
    async def expire(self, key: str, seconds: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ TTL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞"""
        try:
            if not self._redis:
                await self.connect()
            return bool(await self._redis.expire(key, seconds))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TTL key={key}: {e}")
            return False
    
    async def increment(self, key: str, amount: int = 1) -> Optional[int]:
        """–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∑–Ω–∞—á–µ–Ω–∏—è (–¥–ª—è rate limiting)"""
        try:
            if not self._redis:
                await self.connect()
            return await self._redis.incrby(key, amount)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ key={key}: {e}")
            return None
    
    async def get_keys_pattern(self, pattern: str) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É"""
        try:
            if not self._redis:
                await self.connect()
            return await self._redis.keys(pattern)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É {pattern}: {e}")
            return []
    
    async def flush_db(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è development!)"""
        try:
            if not self._redis:
                await self.connect()
            
            if not settings.is_development:
                logger.warning("‚ùå –û—á–∏—Å—Ç–∫–∞ Redis —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ development —Ä–µ–∂–∏–º–µ!")
                return False
            
            await self._redis.flushdb()
            logger.info("üóëÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Redis –æ—á–∏—â–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Redis: {e}")
            return False
    
    async def test_connection(self) -> bool:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        try:
            if not self._redis:
                await self.connect()
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = "test_connection"
            test_value = "test_value"
            
            await self.set(test_key, test_value, expire=10)
            result = await self.get(test_key)
            await self.delete(test_key)
            
            if result == test_value:
                logger.info("‚úÖ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
                return True
            else:
                logger.error("‚ùå Redis: –æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis: {e}")
            return False
    
    async def get_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Redis —Å–µ—Ä–≤–µ—Ä–µ"""
        try:
            if not self._redis:
                await self.connect()
            
            info = await self._redis.info()
            return {
                "version": info.get("redis_version"),
                "mode": info.get("redis_mode"),
                "connected_clients": info.get("connected_clients"),
                "used_memory_human": info.get("used_memory_human"),
                "uptime_in_days": info.get("uptime_in_days"),
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ Redis: {e}")
            return {}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = RedisClient()


# Dependency –¥–ª—è FastAPI
async def get_redis_client() -> RedisClient:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞ –≤ endpoints"""
    if not redis_client._redis:
        await redis_client.connect()
    return redis_client


if __name__ == "__main__":
    """
    –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis
    –ó–∞–ø—É—Å–∫: python -m app.database.redis_client
    """
    import asyncio
    
    async def main():
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
        print(f"üîó URL: {settings.redis_url}")
        print(f"üè∑Ô∏è  DB: {settings.redis_db}")
        print("-" * 50)
        
        client = RedisClient()
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        is_connected = await client.test_connection()
        
        if is_connected:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Redis:")
            info = await client.get_info()
            for key, value in info.items():
                if value is not None:
                    print(f"   {key.replace('_', ' ').title()}: {value}")
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        await client.disconnect()
        
        return is_connected
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    result = asyncio.run(main())
    if result:
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ Redis –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∏ Redis –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é.")
        exit(1)