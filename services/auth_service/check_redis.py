"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Redis –∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Auth Service
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from app.database.redis_client import redis_client
from app.config import settings


async def check_redis_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Redis"""
    
    print("Redis Configuration Check")
    print("=" * 40)
    
    print(f"Redis URL: {settings.redis_url}")
    print(f"Redis Host: {settings.redis_host}")
    print(f"Redis Port: {settings.redis_port}")
    print(f"Redis DB: {settings.redis_db}")
    
    print("\nTrying to connect to Redis...")
    
    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        success = await redis_client.test_connection()
        
        if success:
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
            info = await redis_client.get_info()
            if info:
                print("\nRedis Server Info:")
                for key, value in info.items():
                    print(f"  {key}: {value}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            print("\nTesting Redis operations...")
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            await redis_client.set("test_key", "test_value", expire=10)
            value = await redis_client.get("test_key")
            
            if value == "test_value":
                print("‚úÖ Read/Write operations work")
            else:
                print("‚ùå Read/Write operations failed")
            
            # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
            await redis_client.delete("test_key")
            
        else:
            print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
        return False
    
    finally:
        await redis_client.disconnect()
    
    return True


def analyze_current_usage():
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Redis –≤ –∫–æ–¥–µ"""
    
    print("\n" + "=" * 40)
    print("Current Redis Usage Analysis")
    print("=" * 40)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Redis
    usage_locations = []
    
    # –í main.py
    print("‚úÖ Redis client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ main.py (lifespan)")
    
    # –í dependencies
    print("‚ùå Redis –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ dependencies.py")
    
    # –í auth_service
    print("‚ùå Redis –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ auth_service.py")
    
    # –¢–µ–∫—É—â–µ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    print("üìã Refresh —Ç–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ PostgreSQL (refresh_tokens table)")
    print("üìã Blacklist —Ç–æ–∫–µ–Ω–æ–≤ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ PostgreSQL (token_blacklist table)")
    
    print("\nüí° –í—ã–≤–æ–¥: Redis –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤")


def suggest_redis_improvements():
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Redis"""
    
    print("\n" + "=" * 40)
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é Redis")
    print("=" * 40)
    
    print("üéØ –ì–¥–µ Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω:")
    print("  1. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ JWT blacklist (–±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤)")
    print("  2. Rate limiting (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤)")
    print("  3. –°–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  4. –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("  5. Temporary –¥–∞–Ω–Ω—ã–µ (–∫–æ–¥—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏, —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è)")
    
    print("\nüìä –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã:")
    print("  –í—ã—Å–æ–∫–∏–π: JWT Blacklist –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
    print("  –°—Ä–µ–¥–Ω–∏–π: Rate limiting")
    print("  –ù–∏–∑–∫–∏–π: –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    print("\n‚öñÔ∏è  –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis")
    print("  ‚ö†Ô∏è  Redis –º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
    print("  ‚ùì –ù—É–∂–Ω–æ –ª–∏ –æ–Ω–æ —Å–µ–π—á–∞—Å?")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    print("üîç –ê–Ω–∞–ª–∏–∑ Redis –≤ Auth Service")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    redis_available = await check_redis_status()
    
    # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    analyze_current_usage()
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    suggest_redis_improvements()
    
    print("\n" + "=" * 50)
    
    if redis_available:
        print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üí° –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    else:
        print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("üí° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Redis (—Ç–æ–∫–µ–Ω—ã –≤ PostgreSQL)")
        print("üí° –î–ª—è production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å Redis")
    
    return redis_available


if __name__ == "__main__":
    asyncio.run(main())