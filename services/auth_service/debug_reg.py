"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
–ü–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

# Windows compatibility
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from app.database.connection import create_async_session_factory, test_database_connection
from app.repositories.role_repository import RoleRepository
from app.repositories.user_repository import UserRepository
from app.services.auth_service import AuthService
from app.core.security import SecurityManager


async def debug_registration():
    """–û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    print("üîç –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    print("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    if not await test_database_connection():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ë–î!")
        return False
    print("‚úÖ –ë–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
    
    session_factory = create_async_session_factory()
    
    async with session_factory() as db:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–µ–π
            print("\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ...")
            role_repo = RoleRepository(db)
            roles = await role_repo.get_all()
            
            if not roles:
                print("‚ùå –í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç —Ä–æ–ª–µ–π!")
                print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python scripts/init_database.py")
                return False
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–æ–ª–µ–π: {len(roles)}")
            for role in roles:
                print(f"   - {role.name}: {role.description}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            student_role = await role_repo.get_default_student_role()
            if not student_role:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é!")
                return False
            print(f"‚úÖ –†–æ–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {student_role.name} (ID: {student_role.id})")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            print("\n3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            
            test_email = "test_debug@example.com"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            user_repo = UserRepository(db)
            existing_user = await user_repo.get_by_email(test_email)
            if existing_user:
                print(f"‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {test_email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º...")
                await user_repo.delete(existing_user.id)
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ AuthService
            auth_service = AuthService(db)
            
            result = await auth_service.register_user(
                email=test_email,
                password="testpassword123",
                first_name="Test",
                last_name="User",
                phone="+79082119056",
                privacy_policy_accepted=True
            )
            
            print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"   ID: {result['user']['id']}")
            print(f"   Email: {result['user']['email']}")
            print(f"   Role: {result['user']['role']}")
            print(f"   Token —Å–æ–∑–¥–∞–Ω: {'access_token' in result['tokens']}")
            
            # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await user_repo.delete(result['user']['id'])
            print("üóëÔ∏è  –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–∞–¥–∫–µ: {e}")
            print(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            import traceback
            print("\nüìã –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏:")
            traceback.print_exc()
            
            return False


async def check_validation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...")
    
    from app.schemas.auth import RegisterRequest
    from pydantic import ValidationError
    
    test_data = {
        "email": "zxczxczxc@example.com",
        "password": "zxczxczxc123",
        "first_name": "string",
        "last_name": "string", 
        "phone": "+79082119056",
        "privacy_policy_accepted": True
    }
    
    try:
        register_request = RegisterRequest(**test_data)
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
        print(f"   Email: {register_request.email}")
        print(f"   Password length: {len(register_request.password)}")
        print(f"   Phone: {register_request.phone}")
        print(f"   Privacy accepted: {register_request.privacy_policy_accepted}")
        return True
        
    except ValidationError as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:")
        for error in e.errors():
            print(f"   - {error['loc']}: {error['msg']}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {e}")
        return False


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ª–∞–¥–∫–∏"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    validation_ok = await check_validation()
    
    if not validation_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    registration_ok = await debug_registration()
    
    if registration_ok:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("üí° –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        print("   - –ú–∏–¥–¥–ª–≤–∞—Ä–∞—Ö")
        print("   - –†–æ—É—Ç–∏–Ω–≥–µ")
        print("   - Dependency injection")
        return True
    else:
        print("\n‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)