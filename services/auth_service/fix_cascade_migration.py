"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è cascade delete –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ë–î
–í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è foreign key constraint
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

# Windows compatibility
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from app.database.connection import create_async_session_factory, test_database_connection
from sqlalchemy import text


async def fix_foreign_key_cascade():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ foreign key –¥–ª—è cascade delete"""
    
    print("üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ foreign key constraints...")
    
    if not await test_database_connection():
        print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î!")
        return False
    
    session_factory = create_async_session_factory()
    
    async with session_factory() as db:
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π constraint
            await db.execute(text("""
                ALTER TABLE refresh_tokens 
                DROP CONSTRAINT IF EXISTS refresh_tokens_user_id_fkey
            """))
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π constraint —Å CASCADE
            await db.execute(text("""
                ALTER TABLE refresh_tokens 
                ADD CONSTRAINT refresh_tokens_user_id_fkey 
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            """))
            
            # –¢–æ –∂–µ —Å–∞–º–æ–µ –¥–ª—è token_blacklist
            await db.execute(text("""
                ALTER TABLE token_blacklist 
                DROP CONSTRAINT IF EXISTS token_blacklist_user_id_fkey
            """))
            
            await db.execute(text("""
                ALTER TABLE token_blacklist 
                ADD CONSTRAINT token_blacklist_user_id_fkey 
                FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
            """))
            
            await db.commit()
            
            print("‚úÖ Foreign key constraints –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            return True
            
        except Exception as e:
            await db.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ constraints: {e}")
            return False


if __name__ == "__main__":
    success = asyncio.run(fix_foreign_key_cascade())
    if success:
        print("\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å cascade delete –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print("üí° –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã.")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å constraints.")
    
    exit(0 if success else 1)