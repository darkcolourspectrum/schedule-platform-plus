"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç —Ä–æ–ª–∏ –∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent.parent))

# Windows compatibility
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ SQLAlchemy
from app.models import *
from app.database.connection import create_async_session_factory, test_database_connection
from app.repositories.role_repository import RoleRepository
from app.repositories.user_repository import UserRepository
from app.core.security import SecurityManager


async def init_roles():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    session_factory = create_async_session_factory()
    
    async with session_factory() as db:
        role_repo = RoleRepository(db)
        
        print("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        await role_repo.create_default_roles()
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ä–æ–ª–∏
        roles = await role_repo.get_all()
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ä–æ–ª–µ–π: {len(roles)}")
        for role in roles:
            print(f"   - {role.name}: {role.description}")
        
        await db.commit()


async def create_admin_user():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    session_factory = create_async_session_factory()
    
    async with session_factory() as db:
        user_repo = UserRepository(db)
        role_repo = RoleRepository(db)
        security = SecurityManager()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
        existing_admin = await user_repo.get_by_email("admin@studio.local")
        if existing_admin:
            print("‚ö†Ô∏è  –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_role = await role_repo.get_admin_role()
        if not admin_role:
            print("‚ùå –†–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        hashed_password = security.hash_password("admin123")
        
        admin_user = await user_repo.create_user(
            email="admin@studio.local",
            first_name="–°–∏—Å—Ç–µ–º–Ω—ã–π",
            last_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
            role_id=admin_role.id,
            hashed_password=hashed_password,
            privacy_policy_accepted=True
        )
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:")
        print(f"   Email: admin@studio.local")
        print(f"   –ü–∞—Ä–æ–ª—å: admin123")
        print(f"   ID: {admin_user.id}")
        
        await db.commit()


async def create_test_studio():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ç—É–¥–∏–∏"""
    session_factory = create_async_session_factory()
    
    async with session_factory() as db:
        from app.models.studio import Studio
        from sqlalchemy import select
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å—Ç—É–¥–∏—è
        query = select(Studio).where(Studio.name == "–¢–µ—Å—Ç–æ–≤–∞—è –°—Ç—É–¥–∏—è")
        result = await db.execute(query)
        existing_studio = result.scalar_one_or_none()
        
        if existing_studio:
            print("‚ö†Ô∏è  –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—É–¥–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—É–¥–∏—é
        studio = Studio(
            name="–¢–µ—Å—Ç–æ–≤–∞—è –°—Ç—É–¥–∏—è",
            description="–°—Ç—É–¥–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
            address="–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, –¥. 1",
            phone="+7 (900) 123-45-67",
            email="info@teststudio.local",
            is_active=True
        )
        
        db.add(studio)
        await db.commit()
        await db.refresh(studio)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—É–¥–∏—è:")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {studio.name}")
        print(f"   ID: {studio.id}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Auth Service")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    print("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    if not await test_database_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–ª–∏
        await init_roles()
        print()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ç—É–¥–∏—é
        await create_test_studio()
        print()
        
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await create_admin_user()
        print()
        
        print("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("=" * 50)
        print("üí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:")
        print("   python -m app.main")
        print()
        print("üîë –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:")
        print("   Email: admin@studio.local")
        print("   –ü–∞—Ä–æ–ª—å: admin123")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        print(f"üìã –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)