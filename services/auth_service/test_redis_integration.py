"""
–¢–µ—Å—Ç—ã –¥–ª—è Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: JWT blacklist –∏ rate limiting
"""

import asyncio
import sys
import time
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

import httpx
from datetime import datetime, timedelta

from app.database.connection import create_async_session_factory
from app.services.redis_blacklist_service import RedisBlacklistService
from app.services.redis_rate_limiter import AuthRateLimiter
from app.database.redis_client import redis_client

BASE_URL = "http://127.0.0.1:8000"


class RedisIntegrationTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.client = httpx.AsyncClient(base_url=BASE_URL, timeout=30.0)
        self.test_email = "redis_test@example.com"
    
    async def test_redis_connection(self) -> bool:
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
        
        try:
            success = await redis_client.test_connection()
            if success:
                print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
            return False
    
    async def test_blacklist_caching(self) -> bool:
        """–¢–µ—Å—Ç –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è JWT blacklist"""
        print("\nüö´ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JWT blacklist –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
        
        try:
            session_factory = create_async_session_factory()
            
            async with session_factory() as db:
                blacklist_service = RedisBlacklistService(db)
                
                # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω JTI
                test_jti = "test-jwt-id-12345"
                
                # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –≤ blacklist
                is_blacklisted_1 = await blacklist_service.is_token_blacklisted(test_jti)
                print(f"   –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å False): {is_blacklisted_1}")
                
                if is_blacklisted_1:
                    print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ blacklist")
                    return False
                
                # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ blacklist
                expires_at = datetime.utcnow() + timedelta(hours=1)
                await blacklist_service.add_token_to_blacklist(
                    token_jti=test_jti,
                    token_type="access",
                    expires_at=expires_at,
                    reason="test"
                )
                print("   –¢–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist")
                
                # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –∫–µ—à (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±—ã—Å—Ç—Ä–æ)
                start_time = time.time()
                is_blacklisted_2 = await blacklist_service.is_token_blacklisted(test_jti)
                cache_time = time.time() - start_time
                
                print(f"   –í—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å True): {is_blacklisted_2}")
                print(f"   –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–µ–∑ –∫–µ—à: {cache_time:.4f}s")
                
                if not is_blacklisted_2:
                    print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ blacklist")
                    return False
                
                # 4. –û—á–∏—Å—Ç–∫–∞
                await blacklist_service.remove_token_from_cache(test_jti)
                print("   –¢–æ–∫–µ–Ω —É–¥–∞–ª–µ–Ω –∏–∑ –∫–µ—à–∞")
                
                print("‚úÖ JWT blacklist –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è blacklist: {e}")
            return False
    
    async def test_rate_limiting(self) -> bool:
        """–¢–µ—Å—Ç rate limiting"""
        print("\n‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ rate limiting...")
        
        try:
            rate_limiter = AuthRateLimiter()
            test_ip = "192.168.1.100"
            
            # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting –¥–ª—è –≤—Ö–æ–¥–∞
            print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º rate limiting –¥–ª—è –≤—Ö–æ–¥–∞...")
            
            # –î–æ–ª–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
            for i in range(3):
                try:
                    await rate_limiter.check_login_rate_limit(self.test_email, test_ip)
                    print(f"     –ü–æ–ø—ã—Ç–∫–∞ {i+1}: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
                except Exception as e:
                    print(f"     –ü–æ–ø—ã—Ç–∫–∞ {i+1}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ ({e})")
                    return False
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            print("   –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞...")
            blocked_attempts = 0
            
            for i in range(10):
                try:
                    await rate_limiter.check_login_rate_limit(self.test_email, test_ip)
                    print(f"     –ü–æ–ø—ã—Ç–∫–∞ {i+4}: —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
                except Exception:
                    blocked_attempts += 1
                    print(f"     –ü–æ–ø—ã—Ç–∫–∞ {i+4}: –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞")
            
            if blocked_attempts > 0:
                print(f"‚úÖ Rate limiting —Ä–∞–±–æ—Ç–∞–µ—Ç: {blocked_attempts} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                
                # 3. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç
                await rate_limiter.reset_failed_login_attempts(self.test_email, test_ip)
                print("   Rate limit —Å–±—Ä–æ—à–µ–Ω")
                
                return True
            else:
                print("‚ùå Rate limiting –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è rate limiting: {e}")
            return False
    
    async def test_end_to_end_performance(self) -> bool:
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ end-to-end"""
        print("\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
        
        try:
            # 1. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            register_data = {
                "email": self.test_email,
                "password": "testpassword123",
                "first_name": "Redis",
                "last_name": "Test",
                "phone": "+79001234567",
                "privacy_policy_accepted": True
            }
            
            # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                session_factory = create_async_session_factory()
                async with session_factory() as db:
                    from app.repositories.user_repository import UserRepository
                    user_repo = UserRepository(db)
                    user = await user_repo.get_by_email(self.test_email)
                    if user:
                        await user_repo.delete(user.id)
                        print("   –£–¥–∞–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            except:
                pass
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            response = await self.client.post("/api/v1/auth/register", json=register_data)
            
            if response.status_code != 201:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
                return False
            
            data = response.json()
            access_token = data["tokens"]["access_token"]
            
            print("   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            
            # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞
            headers = {"Authorization": f"Bearer {access_token}"}
            
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫–µ—à)
            start_time = time.time()
            response1 = await self.client.get("/api/v1/auth/me", headers=headers)
            first_request_time = time.time() - start_time
            
            # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫–µ—à–∞)
            start_time = time.time()
            response2 = await self.client.get("/api/v1/auth/me", headers=headers)
            second_request_time = time.time() - start_time
            
            print(f"   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: {first_request_time:.4f}s")
            print(f"   –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: {second_request_time:.4f}s")
            
            if response1.status_code == 200 and response2.status_code == 200:
                speedup = first_request_time / second_request_time if second_request_time > 0 else 1
                print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
                
                if speedup > 1.1:  # –•–æ—Ç—è –±—ã 10% —É—Å–∫–æ—Ä–µ–Ω–∏–µ
                    print("‚úÖ –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–µ—Ç –ø—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
                else:
                    print("‚ö†Ô∏è  –ü—Ä–∏—Ä–æ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–∏–Ω–∏–º–∞–ª–µ–Ω")
                
                # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º logout —Å blacklist
                logout_response = await self.client.post("/api/v1/auth/logout", headers=headers)
                
                if logout_response.status_code == 200:
                    print("   Logout –≤—ã–ø–æ–ª–Ω–µ–Ω, —Ç–æ–∫–µ–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ blacklist")
                    
                    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                    blocked_response = await self.client.get("/api/v1/auth/me", headers=headers)
                    
                    if blocked_response.status_code == 401:
                        print("‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Redis")
                        return True
                    else:
                        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
                        return False
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ logout: {logout_response.status_code}")
                    return False
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ end-to-end —Ç–µ—Å—Ç–∞: {e}")
            return False
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            try:
                session_factory = create_async_session_factory()
                async with session_factory() as db:
                    from app.repositories.user_repository import UserRepository
                    user_repo = UserRepository(db)
                    user = await user_repo.get_by_email(self.test_email)
                    if user:
                        await user_repo.delete(user.id)
            except:
                pass
    
    async def run_all_tests(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –¥–ª—è Auth Service")
        print("=" * 50)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
            redis_ok = await self.test_redis_connection()
            if not redis_ok:
                print("‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —Ç–µ—Å—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
                return False
            
            # –¢–µ—Å—Ç blacklist –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
            blacklist_ok = await self.test_blacklist_caching()
            
            # –¢–µ—Å—Ç rate limiting
            rate_limit_ok = await self.test_rate_limiting()
            
            # End-to-end —Ç–µ—Å—Ç
            e2e_ok = await self.test_end_to_end_performance()
            
            all_passed = blacklist_ok and rate_limit_ok and e2e_ok
            
            print("\n" + "=" * 50)
            print("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print(f"   JWT Blacklist –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if blacklist_ok else '‚ùå'}")
            print(f"   Rate Limiting: {'‚úÖ' if rate_limit_ok else '‚ùå'}")
            print(f"   End-to-End –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {'‚úÖ' if e2e_ok else '‚ùå'}")
            
            if all_passed:
                print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Redis –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
                print("üí° JWT blacklist –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ rate limiting —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            else:
                print("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã Redis –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
            
            return all_passed
            
        finally:
            await self.client.aclose()
            await redis_client.disconnect()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        async with httpx.AsyncClient(base_url=BASE_URL, timeout=5.0) as client:
            response = await client.get("/health")
            if response.status_code != 200:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
                return False
    except Exception:
        print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
        return False
    
    print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω\n")
    
    tester = RedisIntegrationTester()
    return await tester.run_all_tests()


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)