"""
–¢–µ—Å—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

# Windows compatibility
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())


def test_app_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    print("üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    print("=" * 45)
    
    try:
        from app.main import app
        print("‚úÖ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        routes = []
        for route in app.routes:
            if hasattr(route, 'path') and hasattr(route, 'methods'):
                for method in route.methods:
                    if method != 'HEAD':  # –ò—Å–∫–ª—é—á–∞–µ–º HEAD –∑–∞–ø—Ä–æ—Å—ã
                        routes.append(f"{method} {route.path}")
        
        print(f"‚úÖ –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(routes)}")
        
        # –ò—â–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        auth_routes = [r for r in routes if '/auth' in r]
        print(f"‚úÖ Auth –º–∞—Ä—à—Ä—É—Ç–æ–≤: {len(auth_routes)}")
        
        if auth_routes:
            print("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ auth –º–∞—Ä—à—Ä—É—Ç—ã:")
            for route in sorted(auth_routes):
                print(f"   - {route}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        register_route = "POST /api/v1/auth/register"
        if register_route in routes:
            print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω: {register_route}")
        else:
            print(f"‚ùå –ú–∞—Ä—à—Ä—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ù–ï –Ω–∞–π–¥–µ–Ω: {register_route}")
            print("üìã –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –†–æ—É—Ç–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            print("   - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å")
            print("   - –û—à–∏–±–∫–∞ –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö")
        
        return len(auth_routes) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_auth_endpoint_details():
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ auth endpoint"""
    
    print("\nüîç –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ auth endpoint...")
    print("=" * 40)
    
    try:
        from app.api.v1.auth import router as auth_router
        print("‚úÖ Auth —Ä–æ—É—Ç–µ—Ä –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤ —Ä–æ—É—Ç–µ—Ä–µ
        routes = []
        for route in auth_router.routes:
            if hasattr(route, 'path') and hasattr(route, 'methods'):
                for method in route.methods:
                    if method != 'HEAD':
                        routes.append(f"{method} {route.path}")
        
        print(f"‚úÖ –ú–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ auth —Ä–æ—É—Ç–µ—Ä–µ: {len(routes)}")
        print("üìã –ú–∞—Ä—à—Ä—É—Ç—ã auth —Ä–æ—É—Ç–µ—Ä–∞:")
        for route in sorted(routes):
            print(f"   - {route}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ endpoints
        expected_routes = [
            "POST /auth/register",
            "POST /auth/login", 
            "POST /auth/refresh",
            "POST /auth/logout",
            "GET /auth/me"
        ]
        
        print(f"\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤:")
        all_found = True
        for expected in expected_routes:
            if expected in routes:
                print(f"‚úÖ {expected}")
            else:
                print(f"‚ùå {expected}")
                all_found = False
        
        return all_found
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ auth —Ä–æ—É—Ç–µ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_dependencies():
    """–¢–µ—Å—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    print("=" * 35)
    
    try:
        from app.dependencies import get_auth_service, get_current_user
        print("‚úÖ Dependencies –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        from app.services.auth_service import AuthService
        print("‚úÖ AuthService –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        from app.schemas.auth import RegisterRequest, AuthResponse
        print("‚úÖ Auth —Å—Ö–µ–º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 40)
    
    deps_ok = test_dependencies()
    if not deps_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏!")
        return False
    
    auth_ok = test_auth_endpoint_details()
    if not auth_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å auth —Ä–æ—É—Ç–µ—Ä–æ–º!")
        return False
    
    app_ok = test_app_creation()
    if not app_ok:
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º!")
        return False
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("üí° –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:")
    print("   1. –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
    print("   2. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä: python run_server.py") 
    print("   3. –û—Ç–∫—Ä—ã—Ç—å Swagger: http://localhost:8000/docs")
    print("   4. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞")
    
    return True


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)