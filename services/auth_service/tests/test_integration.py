"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è Auth Service
–¢–µ—Å—Ç–∏—Ä—É—é—Ç –≤–µ—Å—å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —á–µ—Ä–µ–∑ HTTP API
"""

import asyncio
import sys
import pytest
import httpx
from datetime import datetime
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent))

if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from app.main import app
from app.database.connection import create_async_session_factory
from app.repositories.user_repository import UserRepository


TEST_USERS = [
    {
        "email": "testuser1@example.com",
        "password": "testpassword123",
        "first_name": "Test",
        "last_name": "User1",
        "phone": "+79081234567",
        "privacy_policy_accepted": True
    },
    {
        "email": "testuser2@example.com", 
        "password": "testpassword456",
        "first_name": "Test",
        "last_name": "User2",
        "phone": "+79087654321",
        "privacy_policy_accepted": True
    }
]

BASE_URL = "http://127.0.0.1:8000"


class AuthServiceTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Auth Service"""
    
    def __init__(self):
        self.client = httpx.AsyncClient(base_url=BASE_URL, timeout=30.0)
        self.tokens = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.users = {}   # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    async def cleanup_test_users(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
        session_factory = create_async_session_factory()
        
        async with session_factory() as db:
            user_repo = UserRepository(db)
            
            for user_data in TEST_USERS:
                try:
                    user = await user_repo.get_by_email(user_data["email"])
                    if user:
                        # –û—Ç–∑—ã–≤–∞–µ–º –≤—Å–µ —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
                        try:
                            await self.client.post(
                                "/api/v1/auth/logout-all",
                                headers={"Authorization": f"Bearer {self.tokens.get(user.email, 'invalid')}"}
                            )
                        except:
                            pass
                        
                        # –¢–µ–ø–µ—Ä—å —É–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å)
                        await user_repo.delete(user.id)
                        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data['email']}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ {user_data['email']}: {e}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω—ã
                    try:
                        from app.repositories.user_repository import RefreshTokenRepository
                        refresh_repo = RefreshTokenRepository(db)
                        if 'user' in locals() and user:
                            await refresh_repo.revoke_user_tokens(user.id)
                            await user_repo.delete(user.id)
                            print(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω: {user_data['email']}")
                    except Exception as cleanup_error:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {user_data['email']}: {cleanup_error}")
    
    async def test_health_endpoints(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö endpoint'–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoints...")
        
        # –ö–æ—Ä–Ω–µ–≤–æ–π endpoint
        response = await self.client.get("/")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "running"
        assert "Auth Service" in data["service"]
        print("–ö–æ—Ä–Ω–µ–≤–æ–π endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # Health check
        response = await self.client.get("/health")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
        print("Health check —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    async def test_user_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for i, user_data in enumerate(TEST_USERS):
            response = await self.client.post("/api/v1/auth/register", json=user_data)
            
            if response.status_code == 409:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue
            
            assert response.status_code == 201, f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.text}"
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            assert "user" in data
            assert "tokens" in data
            assert data["user"]["email"] == user_data["email"]
            assert data["user"]["role"] == "student"
            assert "access_token" in data["tokens"]
            assert "refresh_token" in data["tokens"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
            self.users[user_data["email"]] = data["user"]
            self.tokens[user_data["email"]] = data["tokens"]["access_token"]
            
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω (ID: {data['user']['id']})")
    
    async def test_duplicate_registration(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥—É–±–ª–∏—Ä—É—é—â–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
        response = await self.client.post("/api/v1/auth/register", json=TEST_USERS[0])
        assert response.status_code == 409
        data = response.json()
        assert "already exists" in data["detail"]
        print("–î—É–±–ª–∏—Ä—É—é—â–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    
    async def test_invalid_registration_data(self):
        """–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...")
        
        invalid_cases = [
            # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π email
            {
                **TEST_USERS[0],
                "email": "invalid-email",
            },
            # –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–∞—Ä–æ–ª—å
            {
                **TEST_USERS[0],
                "email": "short@test.com",
                "password": "123"
            },
            # –ù–µ –ø—Ä–∏–Ω—è—Ç–∞ –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            {
                **TEST_USERS[0], 
                "email": "policy@test.com",
                "privacy_policy_accepted": False
            }
        ]
        
        for i, invalid_data in enumerate(invalid_cases):
            response = await self.client.post("/api/v1/auth/register", json=invalid_data)
            assert response.status_code == 422, f"–ö–µ–π—Å {i+1} –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 422"
            print(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –∫–µ–π—Å {i+1} –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    
    async def test_user_login(self):
        """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        for user_data in TEST_USERS:
            login_data = {
                "email": user_data["email"],
                "password": user_data["password"]
            }
            
            response = await self.client.post("/api/v1/auth/login", json=login_data)
            
            if response.status_code == 401:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º login —Ç–µ—Å—Ç")
                continue
            
            assert response.status_code == 200, f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.text}"
            data = response.json()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            assert "user" in data
            assert "tokens" in data
            assert data["user"]["email"] == user_data["email"]
            assert "access_token" in data["tokens"]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
            self.tokens[user_data["email"]] = data["tokens"]["access_token"]
            
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['email']} —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª")
    
    async def test_invalid_login(self):
        """–¢–µ—Å—Ç –≤—Ö–æ–¥–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤—Ö–æ–¥–∞...")
        
        # –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å
        response = await self.client.post("/api/v1/auth/login", json={
            "email": TEST_USERS[0]["email"],
            "password": "wrongpassword"
        })
        assert response.status_code == 401
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        
        # –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        response = await self.client.post("/api/v1/auth/login", json={
            "email": "nonexistent@test.com", 
            "password": "password123"
        })
        assert response.status_code == 401
        print("–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    
    async def test_protected_endpoints(self):
        """–¢–µ—Å—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoint'–æ–≤"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö endpoints...")
        
        # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
        response = await self.client.get("/api/v1/auth/me")
        assert response.status_code == 422 or response.status_code == 401
        print("–ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ —Ç–æ–∫–µ–Ω–∞")
        
        # –¢–µ—Å—Ç —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
        email = TEST_USERS[0]["email"]
        if email in self.tokens:
            headers = {"Authorization": f"Bearer {self.tokens[email]}"}
            response = await self.client.get("/api/v1/auth/me", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                assert data["email"] == email
                print(f"–ó–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint –¥–æ—Å—Ç—É–ø–µ–Ω —Å –≤–∞–ª–∏–¥–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º")
            else:
                print(f"–¢–æ–∫–µ–Ω –≤–æ–∑–º–æ–∂–Ω–æ –∏—Å—Ç–µ–∫, —Å—Ç–∞—Ç—É—Å: {response.status_code}")
    
    async def test_token_validation(self):
        """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–æ–≤...")
        
        email = TEST_USERS[0]["email"]
        if email in self.tokens:
            headers = {"Authorization": f"Bearer {self.tokens[email]}"}
            response = await self.client.post("/api/v1/auth/validate-token", headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                assert data["valid"] == True
                assert "user_id" in data
                print("–í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                print(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
    
    async def test_logout(self):
        """–¢–µ—Å—Ç –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...")
        
        email = TEST_USERS[0]["email"]
        if email in self.tokens:
            # –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å refresh token –∏–∑ login
            login_data = {
                "email": email,
                "password": TEST_USERS[0]["password"]
            }
            
            # –õ–æ–≥–∏–Ω–∏–º—Å—è –∑–∞–Ω–æ–≤–æ —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ —Ç–æ–∫–µ–Ω—ã
            login_response = await self.client.post("/api/v1/auth/login", json=login_data)
            if login_response.status_code == 200:
                login_data_response = login_response.json()
                self.tokens[email] = login_data_response["tokens"]["access_token"]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º cookies –¥–ª—è refresh token
                cookies = login_response.cookies
                
                headers = {"Authorization": f"Bearer {self.tokens[email]}"}
                
                # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–π—Ç–∏
                response = await self.client.post("/api/v1/auth/logout", headers=headers, cookies=cookies)
                
                if response.status_code == 200:
                    data = response.json()
                    assert "message" in data
                    print("–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—Ç–∞–ª –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º
                    response = await self.client.get("/api/v1/auth/me", headers=headers)
                    assert response.status_code == 401
                    print("–¢–æ–∫–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω")
                else:
                    print(f"–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞: {response.status_code}")
                    print(f"    Response: {response.text}")
            else:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è –¥–ª—è —Ç–µ—Å—Ç–∞ logout: {login_response.status_code}")
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Auth Service")
        print("=" * 50)
        
        try:
            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await self.cleanup_test_users()
            
            # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
            await self.test_health_endpoints()
            await self.test_user_registration()
            await self.test_duplicate_registration()
            await self.test_invalid_registration_data()
            await self.test_user_login()
            await self.test_invalid_login()
            await self.test_protected_endpoints()
            await self.test_token_validation()
            await self.test_logout()
            
            print("\n–í—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print("=" * 50)
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
            await self.cleanup_test_users()
            
        except Exception as e:
            print(f"\n–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
            import traceback
            traceback.print_exc()
            
            # –ü–æ–ø—ã—Ç–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            try:
                await self.cleanup_test_users()
            except:
                pass
            
            raise
        
        finally:
            await self.client.aclose()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
    try:
        async with httpx.AsyncClient(base_url=BASE_URL, timeout=5.0) as client:
            response = await client.get("/health")
            if response.status_code != 200:
                print("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
                print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
                return False
    except Exception:
        print("–°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
        return False
    
    print("–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    tester = AuthServiceTester()
    await tester.run_all_tests()
    
    return True


if __name__ == "__main__":
    success = asyncio.run(main())
    exit(0 if success else 1)