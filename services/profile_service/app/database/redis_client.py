"""
Redis client configuration for Profile Service
–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import json
import logging
from typing import Optional, Any, Dict, Union
import redis.asyncio as redis
from redis.asyncio import ConnectionPool

from app.config import settings

logger = logging.getLogger(__name__)


class RedisClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è Profile Service"""
    
    def __init__(self):
        self.pool: Optional[ConnectionPool] = None
        self.client: Optional[redis.Redis] = None
        self._connected = False
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            self.pool = ConnectionPool.from_url(
                settings.redis_url,
                decode_responses=True,
                encoding='utf-8',
                max_connections=20,
                retry_on_timeout=True
            )
            
            self.client = redis.Redis(connection_pool=self.pool)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await self.client.ping()
            self._connected = True
            
            logger.info("Redis connection established successfully")
            
        except Exception as e:
            logger.error(f"Failed to connect to Redis: {e}")
            self._connected = False
            raise
    
    async def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        try:
            if self.client:
                await self.client.close()
            if self.pool:
                await self.pool.disconnect()
            
            self._connected = False
            logger.info("Redis connection closed")
            
        except Exception as e:
            logger.error(f"Error disconnecting from Redis: {e}")
    
    @property
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return self._connected
    
    async def set(
        self, 
        key: str, 
        value: Any, 
        ttl: Optional[int] = None,
        serialize: bool = True
    ) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Redis
        
        Args:
            key: –ö–ª—é—á
            value: –ó–Ω–∞—á–µ–Ω–∏–µ (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON –µ—Å–ª–∏ serialize=True)
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            serialize: –°–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON
        """
        if not self.client or not self._connected:
            logger.warning("Redis client not connected")
            return False
        
        try:
            if serialize:
                value = json.dumps(value, ensure_ascii=False, default=str)
            
            if ttl:
                await self.client.setex(key, ttl, value)
            else:
                await self.client.set(key, value)
            
            return True
            
        except Exception as e:
            logger.error(f"Error setting Redis key {key}: {e}")
            return False
    
    async def get(
        self, 
        key: str, 
        deserialize: bool = True
    ) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Redis
        
        Args:
            key: –ö–ª—é—á
            deserialize: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–∏ –∏–∑ JSON
        """
        if not self.client or not self._connected:
            logger.warning("Redis client not connected")
            return None
        
        try:
            value = await self.client.get(key)
            
            if value is None:
                return None
            
            if deserialize:
                try:
                    return json.loads(value)
                except json.JSONDecodeError:
                    logger.warning(f"Failed to deserialize value for key {key}")
                    return value
            
            return value
            
        except Exception as e:
            logger.error(f"Error getting Redis key {key}: {e}")
            return None
    
    async def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ Redis"""
        if not self.client or not self._connected:
            return False
        
        try:
            result = await self.client.delete(key)
            return result > 0
        except Exception as e:
            logger.error(f"Error deleting Redis key {key}: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞"""
        if not self.client or not self._connected:
            return False
        
        try:
            result = await self.client.exists(key)
            return result > 0
        except Exception as e:
            logger.error(f"Error checking Redis key {key}: {e}")
            return False
    
    async def expire(self, key: str, ttl: int) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –¥–ª—è –∫–ª—é—á–∞"""
        if not self.client or not self._connected:
            return False
        
        try:
            result = await self.client.expire(key, ttl)
            return result
        except Exception as e:
            logger.error(f"Error setting TTL for Redis key {key}: {e}")
            return False
    
    async def delete_pattern(self, pattern: str) -> int:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        –û—Å—Ç–æ—Ä–æ–∂–Ω–æ: –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º –Ω–∞ –±–æ–ª—å—à–∏—Ö –ë–î
        """
        if not self.client or not self._connected:
            return 0
        
        try:
            keys = await self.client.keys(pattern)
            if keys:
                result = await self.client.delete(*keys)
                return result
            return 0
        except Exception as e:
            logger.error(f"Error deleting Redis keys by pattern {pattern}: {e}")
            return 0
    
    async def increment(self, key: str, amount: int = 1) -> Optional[int]:
        """–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è"""
        if not self.client or not self._connected:
            return None
        
        try:
            result = await self.client.incrby(key, amount)
            return result
        except Exception as e:
            logger.error(f"Error incrementing Redis key {key}: {e}")
            return None
    
    async def hash_set(
        self, 
        key: str, 
        field: str, 
        value: Any,
        serialize: bool = True
    ) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ Redis hash"""
        if not self.client or not self._connected:
            return False
        
        try:
            if serialize:
                value = json.dumps(value, ensure_ascii=False, default=str)
            
            await self.client.hset(key, field, value)
            return True
        except Exception as e:
            logger.error(f"Error setting Redis hash {key}:{field}: {e}")
            return False
    
    async def hash_get(
        self, 
        key: str, 
        field: str, 
        deserialize: bool = True
    ) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ Redis hash"""
        if not self.client or not self._connected:
            return None
        
        try:
            value = await self.client.hget(key, field)
            
            if value is None:
                return None
            
            if deserialize:
                try:
                    return json.loads(value)
                except json.JSONDecodeError:
                    return value
            
            return value
        except Exception as e:
            logger.error(f"Error getting Redis hash {key}:{field}: {e}")
            return None
    
    async def hash_delete(self, key: str, field: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—è –∏–∑ Redis hash"""
        if not self.client or not self._connected:
            return False
        
        try:
            result = await self.client.hdel(key, field)
            return result > 0
        except Exception as e:
            logger.error(f"Error deleting Redis hash field {key}:{field}: {e}")
            return False
    
    async def health_check(self) -> Dict[str, Any]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis"""
        if not self.client:
            return {"status": "disconnected", "error": "Client not initialized"}
        
        try:
            start_time = await self.client.time()
            await self.client.ping()
            info = await self.client.info()
            
            return {
                "status": "healthy",
                "connected": self._connected,
                "server_time": start_time,
                "version": info.get("redis_version"),
                "used_memory": info.get("used_memory_human"),
                "connected_clients": info.get("connected_clients")
            }
        except Exception as e:
            return {"status": "unhealthy", "error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = RedisClient()


async def get_redis() -> RedisClient:
    """Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Redis –∫–ª–∏–µ–Ω—Ç–∞"""
    if not redis_client.is_connected:
        await redis_client.connect()
    return redis_client


async def init_redis():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    await redis_client.connect()


async def close_redis():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    await redis_client.disconnect()


if __name__ == "__main__":
    """–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    import asyncio
    
    async def main():
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
        
        try:
            await redis_client.connect()
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_key = "profile_service:test"
            test_data = {"message": "Hello from Profile Service", "timestamp": "2025-01-01"}
            
            print("üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö...")
            await redis_client.set(test_key, test_data, ttl=60)
            
            print("üìñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö...")
            result = await redis_client.get(test_key)
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
            print("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await redis_client.delete(test_key)
            
            # Health check
            print("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis...")
            health = await redis_client.health_check()
            print(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {health}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Redis: {e}")
        finally:
            await redis_client.disconnect()
            print("üéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    
    asyncio.run(main())