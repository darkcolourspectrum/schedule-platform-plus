"""
Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è Profile Service
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π, –¥–∞—à–±–æ—Ä–¥–æ–≤ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
"""

import asyncio
import json
import logging
from typing import Any, Optional, Union
import redis.asyncio as redis
from redis.asyncio import Redis
import sys

# Windows compatibility
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from app.config import settings

logger = logging.getLogger(__name__)


class RedisClient:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π Redis –∫–ª–∏–µ–Ω—Ç –¥–ª—è Profile Service"""
    
    def __init__(self):
        self._redis: Optional[Redis] = None
        self._connected = False
    
    async def connect(self) -> None:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis"""
        try:
            self._redis = redis.from_url(
                settings.redis_url,
                encoding="utf-8",
                decode_responses=True,
                socket_keepalive=True,
                socket_keepalive_options={},
                health_check_interval=30
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            await self._redis.ping()
            self._connected = True
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {settings.redis_url}")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}")
            self._connected = False
            self._redis = None
    
    async def disconnect(self) -> None:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Redis"""
        if self._redis:
            try:
                await self._redis.close()
                logger.info("üîê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis –∑–∞–∫—Ä—ã—Ç–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}")
            finally:
                self._redis = None
                self._connected = False
    
    async def test_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        if not self._redis:
            return False
        
        try:
            await self._redis.ping()
            return True
        except Exception as e:
            logger.error(f"Redis connection test failed: {e}")
            return False
    
    @property
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return self._connected and self._redis is not None
    
    # === –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º ===
    
    async def set(
        self, 
        key: str, 
        value: Any, 
        ttl: Optional[int] = None
    ) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à
        
        Args:
            key: –ö–ª—é—á
            value: –ó–Ω–∞—á–µ–Ω–∏–µ (–±—É–¥–µ—Ç —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ JSON)
            ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        Returns:
            bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
        """
        if not self.is_connected:
            logger.warning("Redis –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
            return False
        
        try:
            # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ JSON
            serialized_value = json.dumps(value, ensure_ascii=False, default=str)
            
            if ttl:
                await self._redis.setex(key, ttl, serialized_value)
            else:
                await self._redis.set(key, serialized_value)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis {key}: {e}")
            return False
    
    async def get(self, key: str) -> Optional[Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞
        
        Args:
            key: –ö–ª—é—á
        
        Returns:
            Any: –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ None
        """
        if not self.is_connected:
            return None
        
        try:
            value = await self._redis.get(key)
            if value is None:
                return None
            
            # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –∏–∑ JSON
            return json.loads(value)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis {key}: {e}")
            return None
    
    async def delete(self, key: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –∏–∑ –∫—ç—à–∞
        
        Args:
            key: –ö–ª—é—á –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª—é—á –±—ã–ª —É–¥–∞–ª–µ–Ω
        """
        if not self.is_connected:
            return False
        
        try:
            result = await self._redis.delete(key)
            return result > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ Redis {key}: {e}")
            return False
    
    async def exists(self, key: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞
        
        Args:
            key: –ö–ª—é—á –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        """
        if not self.is_connected:
            return False
        
        try:
            result = await self._redis.exists(key)
            return result > 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ {key}: {e}")
            return False
    
    async def clear_pattern(self, pattern: str) -> int:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ —à–∞–±–ª–æ–Ω—É
        
        Args:
            pattern: –®–∞–±–ª–æ–Ω –∫–ª—é—á–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "user:123:*")
        
        Returns:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        """
        if not self.is_connected:
            return 0
        
        try:
            keys = await self._redis.keys(pattern)
            if keys:
                deleted = await self._redis.delete(*keys)
                logger.info(f"–£–¥–∞–ª–µ–Ω–æ –∫–ª—é—á–µ–π –ø–æ —à–∞–±–ª–æ–Ω—É '{pattern}': {deleted}")
                return deleted
            return 0
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π –ø–æ —à–∞–±–ª–æ–Ω—É {pattern}: {e}")
            return 0
    
    # === –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è Profile Service ===
    
    async def cache_user_profile(
        self, 
        user_id: int, 
        profile_data: dict
    ) -> bool:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        key = f"user_profile:{user_id}"
        return await self.set(key, profile_data, settings.cache_user_profile_ttl)
    
    async def get_user_profile(self, user_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞"""
        key = f"user_profile:{user_id}"
        return await self.get(key)
    
    async def cache_dashboard(
        self, 
        user_id: int, 
        role: str, 
        dashboard_data: dict
    ) -> bool:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞"""
        key = f"dashboard:{role}:{user_id}"
        return await self.set(key, dashboard_data, settings.cache_dashboard_ttl)
    
    async def get_dashboard(self, user_id: int, role: str) -> Optional[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞ –∏–∑ –∫—ç—à–∞"""
        key = f"dashboard:{role}:{user_id}"
        return await self.get(key)
    
    async def invalidate_user_cache(self, user_id: int) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ–≥–æ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        pattern = f"*:{user_id}*"
        return await self.clear_pattern(pattern)
    
    async def cache_comments(
        self, 
        target_type: str, 
        target_id: int, 
        comments_data: list
    ) -> bool:
        """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"""
        key = f"comments:{target_type}:{target_id}"
        return await self.set(key, comments_data, settings.cache_comments_ttl)
    
    async def get_comments(
        self, 
        target_type: str, 
        target_id: int
    ) -> Optional[list]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–∑ –∫—ç—à–∞"""
        key = f"comments:{target_type}:{target_id}"
        return await self.get(key)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Redis –∫–ª–∏–µ–Ω—Ç–∞
redis_client = RedisClient()


# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
if __name__ == "__main__":
    async def main():
        print("üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis...")
        
        await redis_client.connect()
        
        if redis_client.is_connected:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            await redis_client.set("test_key", {"message": "Hello Redis!"}, 60)
            value = await redis_client.get("test_key")
            print(f"üìù –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è: {value}")
            
            await redis_client.delete("test_key")
            print("üóëÔ∏è –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á —É–¥–∞–ª–µ–Ω")
        else:
            print("‚ùå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –Ω–µ —É–¥–∞–ª–æ—Å—å!")
        
        await redis_client.disconnect()
    
    asyncio.run(main())