"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Profile Service
"""

import logging
import time
from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse

from app.config import settings
from app.api.router import api_router
from app.database.connection import test_database_connection
from app.services.cache_service import cache_service
from app.services.auth_client import auth_client

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º middleware –∏–∑ core
from app.core.middleware import (
    LoggingMiddleware,
    SecurityHeadersMiddleware,
    RequestIDMiddleware,
    ErrorHandlingMiddleware
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO if not settings.debug else logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ó–∞–ø—É—Å–∫
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ {settings.app_name} v{settings.app_version}")
    logger.info(f"üîß –†–µ–∂–∏–º: {settings.environment}")
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    import os
    avatar_path = getattr(settings, 'avatar_upload_full_path', 'static/avatars')
    if not os.path.exists(avatar_path):
        try:
            os.makedirs(avatar_path, exist_ok=True)
            logger.info(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤: {avatar_path}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        db_connected = await test_database_connection()
        if db_connected:
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
        cache_stats = await cache_service.get_cache_stats()
        if cache_stats.get("enabled", False):
            logger.info("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Auth Service (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)
    try:
        logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth Service...")
        auth_available = await auth_client.health_check()
        if auth_available:
            logger.info("‚úÖ Auth Service –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            logger.warning("‚ö†Ô∏è Auth Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Auth Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    logger.info("üéâ Profile Service —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    yield
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    logger.info("üîÑ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã Profile Service...")
    logger.info("‚úÖ Profile Service –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è FastAPI
app = FastAPI(
    title="Profile Service",
    description="–ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤–æ–∫–∞–ª—å–Ω–æ–π —à–∫–æ–ª—ã",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None
)

# –î–æ–±–∞–≤–ª—è–µ–º middleware –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º)
app.add_middleware(ErrorHandlingMiddleware)
app.add_middleware(SecurityHeadersMiddleware)
app.add_middleware(RequestIDMiddleware)
app.add_middleware(LoggingMiddleware)

# CORS –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–º
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.allowed_origins,
    allow_credentials=settings.allow_credentials,
    allow_methods=["*"],
    allow_headers=["*"],
)


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ HTTP –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    return JSONResponse(
        status_code=exc.status_code,
        content={
            "error": exc.detail,
            "status_code": exc.status_code
        }
    )


@app.exception_handler(500)
async def internal_server_error_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.error(f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {exc}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={
            "error": "Internal Server Error",
            "detail": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" if not settings.debug else str(exc)
        }
    )


@app.exception_handler(404)
async def not_found_handler(request: Request, exc: Exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ 404"""
    return JSONResponse(
        status_code=404,
        content={
            "error": "Not Found",
            "detail": "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        }
    )


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
app.include_router(api_router)


# –ë–∞–∑–æ–≤—ã–µ endpoints
@app.get("/", include_in_schema=False)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"""
    return {
        "service": "Profile Service",
        "version": "1.0.0",
        "status": "running",
        "environment": settings.environment
    }


@app.get("/health", tags=["Health"])
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    
    components = {
        "database": False,
        "cache": False,
        "auth_service": False
    }
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        components["database"] = await test_database_connection()
    except Exception as e:
        logger.error(f"Health check DB error: {e}")
        components["database"] = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    try:
        cache_stats = await cache_service.get_cache_stats()
        components["cache"] = cache_stats.get("enabled", False)
    except Exception as e:
        logger.error(f"Health check cache error: {e}")
        components["cache"] = False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth Service
    try:
        components["auth_service"] = await auth_client.health_check()
    except Exception as e:
        logger.error(f"Health check auth error: {e}")
        components["auth_service"] = False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å (–ë–î –∫—Ä–∏—Ç–∏—á–Ω–∞, –æ—Å—Ç–∞–ª—å–Ω–æ–µ - –Ω–µ—Ç)
    is_healthy = components["database"]
    status_code = 200 if is_healthy else 503
    
    return JSONResponse(
        status_code=status_code,
        content={
            "status": "healthy" if is_healthy else "unhealthy",
            "service": "Profile Service",
            "version": "1.0.0",
            "environment": settings.environment,
            "components": components,
            "timestamp": time.time()
        }
    )


@app.get("/metrics", tags=["Monitoring"])
async def get_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        metrics = {
            "service": "Profile Service",
            "version": "1.0.0",
            "environment": settings.environment,
            "timestamp": time.time()
        }
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
        try:
            cache_stats = await cache_service.get_cache_stats()
            metrics["cache"] = cache_stats
        except Exception as e:
            metrics["cache"] = {"error": str(e)}
        
        # –ú–µ—Ç—Ä–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        try:
            db_healthy = await test_database_connection()
            metrics["database"] = {"healthy": db_healthy}
        except Exception as e:
            metrics["database"] = {"error": str(e)}
        
        return metrics
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
        return JSONResponse(
            status_code=500,
            content={"error": "Failed to get metrics", "detail": str(e)}
        )


@app.get("/info", tags=["Info"])
async def service_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ"""
    return {
        "name": settings.app_name,
        "version": settings.app_version,
        "environment": settings.environment,
        "debug": settings.debug,
        "features": {
            "profiles": True,
            "comments": True,
            "dashboard": True,
            "avatars": True,
            "cache": True,
            "auth_integration": True
        }
    }