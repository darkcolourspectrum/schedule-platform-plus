"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ Redis –¥–ª—è Profile Service
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

# Windows compatibility
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from app.config import settings
from app.database.connection import test_database_connection, close_database_connections
from app.database.redis_client import redis_client


async def test_all_connections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô PROFILE SERVICE")
    print("=" * 60)
    
    print(f"–°–µ—Ä–≤–∏—Å: {settings.app_name} v{settings.app_version}")
    print(f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment}")
    print(f"Debug —Ä–µ–∂–∏–º: {settings.debug}")
    
    # –¢–µ—Å—Ç PostgreSQL
    print("\n" + "=" * 40)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POSTGRESQL")
    print("=" * 40)
    print(f"URL: {settings.database_url_async}")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_name}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {settings.database_user}")
    print(f"–•–æ—Å—Ç: {settings.database_host}:{settings.database_port}")
    
    db_success = await test_database_connection()
    
    if db_success:
        print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å PostgreSQL!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   CREATE DATABASE {settings.database_name};")
        print(f"   CREATE USER {settings.database_user} WITH PASSWORD '{settings.database_password}';")
        print(f"   GRANT ALL PRIVILEGES ON DATABASE {settings.database_name} TO {settings.database_user};")
    
    # –¢–µ—Å—Ç Redis
    print("\n" + "=" * 40)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REDIS")
    print("=" * 40)
    print(f"URL: {settings.redis_url}")
    print(f"DB: {settings.redis_db}")
    
    try:
        await redis_client.connect()
        redis_success = await redis_client.test_connection()
        
        if redis_success:
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –æ–ø–µ—Ä–∞—Ü–∏–π...")
            test_key = "profile_test_key"
            test_data = {"test": "data", "service": "profile"}
            
            # SET
            set_ok = await redis_client.set(test_key, test_data, 30)
            if set_ok:
                print("  ‚úÖ SET –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
                # GET
                get_data = await redis_client.get(test_key)
                if get_data == test_data:
                    print("  ‚úÖ GET –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    
                    # DELETE
                    del_ok = await redis_client.delete(test_key)
                    if del_ok:
                        print("  ‚úÖ DELETE –æ–ø–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
                        print("  üéâ –í—Å–µ Redis –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω—ã!")
                    else:
                        print("  ‚ö†Ô∏è DELETE –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                else:
                    print("  ‚ùå GET –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            else:
                print("  ‚ùå SET –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
        else:
            print("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üí° –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        redis_success = False
    finally:
        await redis_client.disconnect()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Profile Service
    print("\n" + "=" * 40)
    print("–ù–ê–°–¢–†–û–ô–ö–ò PROFILE SERVICE")
    print("=" * 40)
    print(f"–ü–∞–ø–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤: {settings.avatar_upload_full_path}")
    print(f"–ú–∞–∫—Å. —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞: {settings.max_avatar_size_mb} –ú–ë")
    print(f"–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {settings.allowed_image_types}")
    print(f"TTL –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {settings.cache_user_profile_ttl} —Å–µ–∫")
    print(f"TTL –∫—ç—à–∞ –¥–∞—à–±–æ—Ä–¥–æ–≤: {settings.cache_dashboard_ttl} —Å–µ–∫")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–ø–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤
    import os
    avatar_path = settings.avatar_upload_full_path
    if not os.path.exists(avatar_path):
        try:
            os.makedirs(avatar_path, exist_ok=True)
            print(f"‚úÖ –ü–∞–ø–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∞: {avatar_path}")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É –∞–≤–∞—Ç–∞—Ä–æ–≤: {e}")
    else:
        print(f"‚úÖ –ü–∞–ø–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {avatar_path}")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await close_database_connections()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    if db_success:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        if redis_success:
            print("‚úÖ Redis –≥–æ—Ç–æ–≤ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        else:
            print("‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
            print("‚úÖ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é: alembic revision --autogenerate -m 'Initial tables'")
        print("2. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
        print("4. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8002/docs")
        
        return True
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print(f"2. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: CREATE DATABASE {settings.database_name};")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env")
        print("4. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ë–î –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
        
        return False


if __name__ == "__main__":
    print("üîç Profile Service - –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    success = asyncio.run(test_all_connections())
    exit(0 if success else 1)