"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π Profile Service
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PostgreSQL, Redis –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
"""

import asyncio
import sys
import os
from typing import Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from app.config import settings
from app.database.connection import check_database_connection, init_database
from app.database.redis_client import redis_client


async def check_postgresql() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL"""
    print("\nüêò –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL...")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"Database URL: {settings.database_url_async}")
        print(f"Database Name: {settings.database_name}")
        print(f"Host: {settings.database_host}:{settings.database_port}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if await check_database_connection():
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–±—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            try:
                await init_database()
                print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            except Exception as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            
            return {"status": "success", "message": "PostgreSQL connection OK"}
        else:
            return {"status": "error", "message": "Failed to connect to PostgreSQL"}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ PostgreSQL: {e}")
        return {"status": "error", "message": str(e)}


async def check_redis() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    print("\nüî¥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis...")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print(f"Redis URL: {settings.redis_url}")
        print(f"Redis DB: {settings.redis_db}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Redis
        await redis_client.connect()
        
        if redis_client.is_connected:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            test_key = "profile_service:connection_test"
            test_data = {"service": "profile", "test": True}
            
            # –ó–∞–ø–∏—Å—å
            if await redis_client.set(test_key, test_data, ttl=10):
                print("‚úÖ –ó–∞–ø–∏—Å—å –≤ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Redis")
            
            # –ß—Ç–µ–Ω–∏–µ
            result = await redis_client.get(test_key)
            if result and result.get("service") == "profile":
                print("‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Redis")
            
            # –£–¥–∞–ª–µ–Ω–∏–µ
            if await redis_client.delete(test_key):
                print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ Redis —Ä–∞–±–æ—Ç–∞–µ—Ç")
            
            # Health check
            health = await redis_client.health_check()
            print(f"Redis –≤–µ—Ä—Å–∏—è: {health.get('version', 'unknown')}")
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {health.get('used_memory', 'unknown')}")
            print(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: {health.get('connected_clients', 'unknown')}")
            
            await redis_client.disconnect()
            return {"status": "success", "message": "Redis connection OK"}
        else:
            return {"status": "error", "message": "Failed to connect to Redis"}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Redis: {e}")
        return {"status": "error", "message": str(e)}


async def check_auth_service() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Auth Service"""
    print("\nüîê –ü—Ä–æ–≤–µ—Ä–∫–∞ Auth Service...")
    print("=" * 40)
    
    try:
        import httpx
        
        print(f"Auth Service URL: {settings.auth_service_url}")
        
        async with httpx.AsyncClient(timeout=5.0) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
            response = await client.get(f"{settings.auth_service_url}/health")
            
            if response.status_code == 200:
                print("‚úÖ Auth Service –¥–æ—Å—Ç—É–ø–µ–Ω")
                data = response.json()
                print(f"–°–µ—Ä–≤–∏—Å: {data.get('service', 'unknown')}")
                print(f"–í–µ—Ä—Å–∏—è: {data.get('version', 'unknown')}")
                return {"status": "success", "message": "Auth Service is available"}
            else:
                print(f"‚ö†Ô∏è Auth Service –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                return {"status": "warning", "message": f"Auth Service HTTP {response.status_code}"}
                
    except httpx.ConnectError:
        print("‚ùå Auth Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)")
        return {"status": "error", "message": "Auth Service connection failed"}
    except httpx.TimeoutException:
        print("‚ùå Auth Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)")
        return {"status": "error", "message": "Auth Service timeout"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Auth Service: {e}")
        return {"status": "error", "message": str(e)}


async def check_schedule_service() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Schedule Service"""
    print("\nüìÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ Schedule Service...")
    print("=" * 40)
    
    try:
        import httpx
        
        print(f"Schedule Service URL: {settings.schedule_service_url}")
        
        async with httpx.AsyncClient(timeout=5.0) as client:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
            response = await client.get(f"{settings.schedule_service_url}/health")
            
            if response.status_code == 200:
                print("‚úÖ Schedule Service –¥–æ—Å—Ç—É–ø–µ–Ω")
                data = response.json()
                print(f"–°–µ—Ä–≤–∏—Å: {data.get('service', 'unknown')}")
                print(f"–í–µ—Ä—Å–∏—è: {data.get('version', 'unknown')}")
                return {"status": "success", "message": "Schedule Service is available"}
            else:
                print(f"‚ö†Ô∏è Schedule Service –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                return {"status": "warning", "message": f"Schedule Service HTTP {response.status_code}"}
                
    except httpx.ConnectError:
        print("‚ùå Schedule Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)")
        return {"status": "error", "message": "Schedule Service connection failed"}
    except httpx.TimeoutException:
        print("‚ùå Schedule Service –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)")
        return {"status": "error", "message": "Schedule Service timeout"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Schedule Service: {e}")
        return {"status": "error", "message": str(e)}


async def check_environment() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüåç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    print("=" * 40)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = [
            "DATABASE_URL",
            "INTERNAL_API_KEY"
        ]
        
        missing_vars = []
        for var in required_vars:
            if not getattr(settings, var.lower(), None):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            return {"status": "error", "message": f"Missing variables: {missing_vars}"}
        
        print("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print(f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment}")
        print(f"Debug —Ä–µ–∂–∏–º: {settings.debug}")
        print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞: {settings.max_avatar_size_mb} MB")
        
        return {"status": "success", "message": "Environment configuration OK"}
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        return {"status": "error", "message": str(e)}


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    print("üîç Profile Service - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π")
    print("=" * 50)
    
    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    checks = [
        ("Environment", check_environment()),
        ("PostgreSQL", check_postgresql()),
        ("Redis", check_redis()),
        ("Auth Service", check_auth_service()),
        ("Schedule Service", check_schedule_service())
    ]
    
    results = {}
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
    for name, check_coro in checks:
        try:
            result = await check_coro
            results[name] = result
        except Exception as e:
            results[name] = {"status": "error", "message": str(e)}
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\nüìä –ò—Ç–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:")
    print("=" * 50)
    
    success_count = 0
    warning_count = 0
    error_count = 0
    
    for name, result in results.items():
        status = result["status"]
        message = result["message"]
        
        if status == "success":
            print(f"‚úÖ {name}: {message}")
            success_count += 1
        elif status == "warning":
            print(f"‚ö†Ô∏è {name}: {message}")
            warning_count += 1
        else:
            print(f"‚ùå {name}: {message}")
            error_count += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count} —É—Å–ø–µ—à–Ω–æ, {warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, {error_count} –æ—à–∏–±–æ–∫")
    
    if error_count == 0:
        print("\nüéâ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!")
        if warning_count > 0:
            print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –Ω–æ —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. –ó–∞–ø—É—â–µ–Ω –ª–∏ PostgreSQL")
        print("   2. –ó–∞–ø—É—â–µ–Ω –ª–∏ Redis")
        print("   3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω .env —Ñ–∞–π–ª")
        print("   4. –ó–∞–ø—É—â–µ–Ω—ã –ª–∏ Auth –∏ Schedule —Å–µ—Ä–≤–∏—Å—ã")
    
    return error_count == 0


if __name__ == "__main__":
    success = asyncio.run(main())
    sys.exit(0 if success else 1)