"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Profile Service
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.config import settings
from app.database.connection import test_database_connection, engine
from app.services.cache_service import cache_service
from app.services.auth_client import auth_client


async def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        from app.models.profile import UserProfile
        from app.models.comment import Comment
        from app.models.activity import UserActivity
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã
        from app.schemas.profile import ProfileResponse, ProfileCreate
        from app.schemas.comment import CommentResponse
        from app.schemas.dashboard import DashboardResponse
        print("‚úÖ –°—Ö–µ–º—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        from app.services.profile_service import ProfileService
        from app.services.comment_service import CommentService
        from app.services.dashboard_service import DashboardService
        print("‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        from app.core.exceptions import ProfileException, ProfileNotFoundException
        from app.core.auth import AuthManager, PermissionChecker
        from app.core.middleware import LoggingMiddleware, SecurityHeadersMiddleware
        print("‚úÖ Core –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API
        from app.api.v1.profiles import router as profiles_router
        from app.api.router import api_router
        print("‚úÖ API —Ä–æ—É—Ç–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        from app.main import app
        print("‚úÖ –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False
    
    return True


async def test_database():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        is_healthy = await test_database_connection()
        if is_healthy:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OK")
            return True
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º")
            return False
        
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ—à–∏–±–∫–∞ - {e}")
        return False


async def test_cache():
    """–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Redis –∫—ç—à...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ cache_service —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        if not hasattr(cache_service, 'get') or not hasattr(cache_service, 'set'):
            print("‚ùå –ö—ç—à: CacheService –Ω–µ –∏–º–µ–µ—Ç –Ω—É–∂–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤")
            return False
        
        # –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
        test_key = "test_profile_service"
        test_data = {"test": "data", "number": 42}
        
        try:
            # –ó–∞–ø–∏—Å—å
            success = await cache_service.set(test_key, test_data, ttl=60)
            if not success:
                print("‚ö†Ô∏è –ö—ç—à: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
                return True  # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            
            # –ß—Ç–µ–Ω–∏–µ
            cached_data = await cache_service.get(test_key)
            if cached_data != test_data:
                print("‚ùå –ö—ç—à: –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
                return False
            
            # –£–¥–∞–ª–µ–Ω–∏–µ
            deleted = await cache_service.delete(test_key)
            if not deleted:
                print("‚ùå –ö—ç—à: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á")
                return False
            
            print("‚úÖ –ö—ç—à: –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç")
            return True
            
        except Exception as cache_error:
            print(f"‚ö†Ô∏è –ö—ç—à: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({cache_error}) - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
            return True  # Redis –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        
    except Exception as e:
        print(f"‚ùå –ö—ç—à: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
        return False


async def test_auth_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Auth Service"""
    print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Auth Service...")
    
    try:
        # –¢–µ—Å—Ç health check
        is_available = await auth_client.health_check()
        if is_available:
            print("‚úÖ Auth Service: –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ö†Ô∏è  Auth Service: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Auth Service: –æ—à–∏–±–∫–∞ - {e}")
        return False


async def test_configuration():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º lowercase –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–∫ –≤ settings)
        required_settings = [
            'database_host', 'database_name', 'redis_host', 
            'auth_service_url', 'app_name', 'app_version'
        ]
        
        missing_settings = []
        for setting in required_settings:
            value = getattr(settings, setting, None)
            if not value:
                missing_settings.append(setting)
        
        if missing_settings:
            print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing_settings)}")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env —Ñ–∞–π–ª")
            return False
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        
        # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print(f"  üìù –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞: {settings.app_name}")
        print(f"  üìù –í–µ—Ä—Å–∏—è: {settings.app_version}")
        print(f"  üìù –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {settings.debug}")
        print(f"  üìù –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_host}:{settings.database_port}")
        print(f"  üìù Redis: {settings.redis_host}:{settings.redis_port}")
        print(f"  üìù Auth Service URL: {settings.auth_service_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Profile Service
        if hasattr(settings, 'max_avatar_size_mb') and settings.max_avatar_size_mb > 0:
            print(f"  üìù –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∞–≤–∞—Ç–∞—Ä–∞: {settings.max_avatar_size_mb}MB")
        
        if hasattr(settings, 'cache_user_profile_ttl') and settings.cache_user_profile_ttl > 0:
            print(f"  üìù TTL –∫—ç—à–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π: {settings.cache_user_profile_ttl}—Å")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –æ—à–∏–±–∫–∞ - {e}")
        return False


async def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Profile Service")
    print("=" * 60)
    
    tests = [
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", test_configuration),
        ("–ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π", test_imports),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", test_database),
        ("–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ", test_cache),
        ("Auth Service", test_auth_integration),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}:")
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"  {test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! Profile Service –≥–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
        print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
        print("  3. –û—Ç–∫—Ä–æ–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é: http://localhost:8002/docs")
    elif passed >= 3:
        print("\n‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É")
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å Redis/Auth Service –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã –¥–ª—è –Ω–∞—á–∞–ª–∞")
        print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —à–∞–≥–∏:")
        print("  1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
        print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
        print("  3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ /health endpoint")
    else:
        print("\n‚ö†Ô∏è  –ï—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å")
        print("  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ")
        print("  –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
    
    return passed >= 3  # –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—Ö–æ–º –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ 3+ —Ç–µ—Å—Ç–∞


if __name__ == "__main__":
    success = asyncio.run(run_all_tests())
    sys.exit(0 if success else 1)