"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ Redis –¥–ª—è Schedule Service
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

# Windows compatibility
if sys.platform == "win32":
    asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

from app.config import settings
from app.database.connection import test_database_connection
from app.database.redis_client import redis_client


async def test_all_connections():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π"""
    
    print("=" * 60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ô SCHEDULE SERVICE")
    print("=" * 60)
    
    print(f"–°–µ—Ä–≤–∏—Å: {settings.app_name} v{settings.app_version}")
    print(f"–û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment}")
    print(f"Debug —Ä–µ–∂–∏–º: {settings.debug}")
    
    # –¢–µ—Å—Ç PostgreSQL
    print("\n" + "=" * 40)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POSTGRESQL")
    print("=" * 40)
    print(f"URL: {settings.database_url}")
    print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_name}")
    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {settings.database_user}")
    
    db_success = await test_database_connection()
    
    if db_success:
        print("‚úÖ PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å PostgreSQL!")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   CREATE DATABASE {settings.database_name};")
    
    # –¢–µ—Å—Ç Redis
    print("\n" + "=" * 40)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï REDIS")
    print("=" * 40)
    print(f"URL: {settings.redis_url}")
    print(f"DB: {settings.redis_db}")
    
    try:
        redis_success = await redis_client.test_connection()
        if redis_success:
            print("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print("‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–µ—Ä–≤–∏—Å –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üí° –≠—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏")
        redis_success = False
    finally:
        await redis_client.disconnect()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    if db_success:
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        if redis_success:
            print("‚úÖ Redis –≥–æ—Ç–æ–≤ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
            print("üéâ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!")
        else:
            print("‚ö†Ô∏è  Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ")
            print("‚úÖ –ú–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–µ–∑ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic revision --autogenerate -m 'Initial migration'")
        print("3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏–∏: alembic upgrade head")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py")
        
        return True
    else:
        print("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞!")
        print("\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω")
        print(f"2. –°–æ–∑–¥–∞–π—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: CREATE DATABASE {settings.database_name};")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ .env")
        
        return False


if __name__ == "__main__":
    success = asyncio.run(test_all_connections())
    exit(0 if success else 1)